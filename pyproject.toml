[tool.poetry]
name = "prompt_optimizer"
version = "0.1.0"
description = "A tool to optimize prompts using DSPy framework"
authors = ["da-moon"]
readme = "README.md"
packages = [{include = "prompt_optimizer"}]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
dspy-ai = "2.6.24"
click = "8.2.1"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
isort = "^6.0.1"
mypy = "^1.15.0"
pylint = "^3.3.7"
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
pyright = "^1.1.401"
poetry-plugin-up = "^0.9.0"
sourcery = "^1.37.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pylint.MASTER]
extension-pkg-whitelist = []
ignore = ["CVS"]
ignore-patterns = []
load-plugins = []
persistent = true
suggestion-mode = true
unsafe-load-any-extension = false

[tool.pylint."MESSAGES CONTROL"]
confidence = []
disable = [
    "missing-module-docstring",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "too-many-instance-attributes",
    "duplicate-code",
    "too-few-public-methods"
]
enable = ["c-extension-no-member"]

[tool.pylint.FORMAT]
expected-line-ending-format = ""
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 88
max-module-lines = 1000
single-line-class-stmt = false
single-line-if-stmt = false

[tool.pylint.BASIC]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
include-naming-hint = false
method-naming-style = "snake_case"
module-naming-style = "snake_case"
variable-naming-style = "snake_case"

[tool.pylint.VARIABLES]
additional-builtins = []
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = false
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins"]

[tool.pylint.TYPECHECK]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-mixin-members = true
ignore-on-opaque-inference = true
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]

[tool.pyright]
venvPath = "."
venv = ".venv"

[tool.mypy]
python_version = "3.10"
mypy_path = "typings"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "dspy"
ignore_missing_imports = false

[tool.pytest.ini_options]
addopts = "-vv"
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"


[tool.poetry.scripts]
dspy-prompt-optimizer = "prompt_optimizer.cli:main"

