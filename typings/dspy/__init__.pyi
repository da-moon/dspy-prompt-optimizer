from typing import Any, Generic, TypeVar, Protocol, List

T = TypeVar('T')

class LM:
    def __init__(self, model: str, provider: str, api_key: str) -> None: ...

class _Settings(Protocol):
    def configure(self, *, lm: LM) -> None: ...

settings: _Settings

class Signature:
    pass

def InputField(*, desc: str) -> str: ...
def OutputField(*, desc: str) -> str: ...

class Example:
    def __init__(self, **fields: str) -> None: ...

class Predict(Generic[T]):
    def __init__(self, signature: type[T]) -> None: ...
    def __call__(self, **kwargs: Any) -> T: ...

class ChainOfThought(Generic[T]):
    def __init__(self, signature: type[T]) -> None: ...
    def __call__(self, **kwargs: Any) -> T: ...
    def update_demos(self, demos: List[Example]) -> None: ...
